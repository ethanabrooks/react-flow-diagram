{"version":3,"sources":["CustomEdge.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomEdge","id","sourceX","sourceY","targetX","targetY","centerX","edgePath","getBezierPath","centerY","className","d","range","n","Array","from","keys","l","nodes","type","data","label","position","x","y","concat","map","flat","numColumns","style","width","edges","target","source","animated","m","elements","App","height","edgeTypes","custom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a56ff4a0.chunk.js","sourcesContent":["import { getBezierPath } from \"react-flow-renderer\";\n\nexport default function CustomEdge({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  centerX,\n}: {\n  id: string;\n  sourceX: number;\n  sourceY: number;\n  targetX: number;\n  targetY: number;\n  centerX: number;\n}) {\n  const centerY = 500;\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    centerX,\n    centerY,\n    targetX,\n    targetY,\n  });\n  return (\n    <>\n      <path id={id} className=\"react-flow__edge-path\" d={edgePath} />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactFlow, { Elements, Edge, Node } from \"react-flow-renderer\";\nimport \"./App.css\";\nimport CustomEdge from \"./CustomEdge\";\n\nconst numColumns = 4;\nconst range = (n: number) => Array.from(Array(n).keys());\nconst l = 50;\nconst nodes: Array<Node> = [\n  {\n    id: \"perception\",\n    type: \"output\", // input node\n    data: { label: \"Perception\" },\n    position: { x: l, y: 450 },\n  } as Node,\n]\n  .concat(\n    range(numColumns)\n      .map((n) => [\n        {\n          id: `hn-${n}`,\n          type: \"default\",\n          data: { label: \"hn\" },\n          position: { x: l + n * 250, y: 250 },\n        },\n\n        {\n          id: `gpt-${n}`,\n          type: \"default\",\n          data: { label: \"GPT\" },\n          position: { x: l + n * 250, y: 300 },\n        },\n        {\n          id: `v-${n}`,\n          type: \"input\",\n          data: { label: \"value estimate\" },\n          position: { x: l + n * 250, y: 50 },\n        },\n        {\n          id: `word-${n}`,\n          type: \"default\",\n          data: { label: \"word\" },\n          position: { x: l + 100 + n * 250, y: 150 },\n        },\n      ])\n      .flat()\n  )\n  .concat(\n    range(numColumns - 1)\n      .map((n) => [\n        {\n          id: `h1-${n + 1}`,\n          type: \"default\",\n          data: { label: \"h1\" },\n          position: { x: l + 50 + (n + 1) * 250, y: 350 },\n          style: { width: 20 },\n        },\n      ])\n      .flat()\n  );\n\nconst edges: Array<Edge> = range(numColumns)\n  .map((n: number) => {\n    return [\n      {\n        id: `perception-gpt${n}`,\n        target: \"perception\",\n        source: `gpt-${n}`,\n        animated: true,\n      },\n      {\n        id: `hn-${n}-gpt-${n}`,\n        source: `hn-${n}`,\n        target: `gpt-${n}`,\n        animated: true,\n      },\n      {\n        id: `hn-${n}-word-${n}`,\n        target: `hn-${n}`,\n        source: `word-${n}`,\n        label: \"REINFORCE\",\n        animated: true,\n      },\n      {\n        id: `hn-${n}-v-${n}`,\n        target: `hn-${n}`,\n        source: `v-${n}`,\n        animated: true,\n      },\n    ];\n  })\n  .flat()\n  .concat(\n    range(numColumns - 1)\n      .map((n) => {\n        n = n + 1;\n        return [\n          {\n            id: `gpt-${n}-h1-${n}`,\n            source: `gpt-${n}`,\n            target: `h1-${n}`,\n            animated: false,\n          },\n        ].concat(\n          range(n).map((m) => ({\n            id: `word-${m}-h1-${n}`,\n            source: `word-${m}`,\n            target: `h1-${n}`,\n            animated: false,\n            type: \"custom\",\n          }))\n        );\n      })\n      .flat()\n  );\nconst elements: Elements = (nodes as Elements).concat(edges as Elements);\n\nconst App = () => (\n  <div style={{ height: 1000 }}>\n    <ReactFlow edgeTypes={{ custom: CustomEdge }} elements={elements} />\n  </div>\n);\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}