{"version":3,"sources":["CustomEdge.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomEdge","centerY","id","sourceX","sourceY","targetX","targetY","centerX","console","log","edgePath","getBezierPath","className","d","range","n","Array","from","keys","l","nodes","type","data","label","position","x","y","numColumns","concat","map","style","height","flat","width","align","edges","target","source","animated","o","m","elements","App","edgeTypes","custom1","custom2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bfdaf8a.chunk.js","sourcesContent":["import { getBezierPath } from \"react-flow-renderer\";\n\nexport type Props = {\n  id: string;\n  sourceX: number;\n  sourceY: number;\n  targetX: number;\n  targetY: number;\n  centerX: number;\n};\n\nexport const CustomEdge = (centerY: number) => {\n  return ({ id, sourceX, sourceY, targetX, targetY, centerX }: Props) => {\n    console.log(centerX);\n    const edgePath = getBezierPath({\n      sourceX,\n      sourceY,\n      centerX,\n      centerY,\n      targetX,\n      targetY,\n    });\n    return (\n      <>\n        <path id={id} className=\"react-flow__edge-path\" d={edgePath} />\n      </>\n    );\n  };\n};\n","import React from \"react\";\nimport ReactFlow, { Elements, Edge, Node } from \"react-flow-renderer\";\nimport \"./App.css\";\nimport { CustomEdge } from \"./CustomEdge\";\n\nconst numColumns = 4;\nconst range = (n: number) => Array.from(Array(n).keys());\nconst l = 50;\nconst nodes: Array<Node> = [\n  {\n    id: \"perception\",\n    type: \"output\", // input node\n    data: { label: \"perception\" },\n    position: { x: l, y: 800 },\n  } as Node,\n  {\n    id: \"action\",\n    type: \"input\", // input node\n    data: { label: \"action\" },\n    position: { x: numColumns * 250, y: 150 },\n  } as Node,\n]\n  .concat(\n    range(numColumns)\n      .map((n) => [\n        {\n          id: `hn-${n}`,\n          type: \"default\",\n          data: {\n            label: (\n              <p>\n                h<sub>n</sub>\n              </p>\n            ),\n          },\n\n          style: { height: 30 },\n          position: { x: l + n * 250, y: 250 },\n        },\n\n        {\n          id: `gpt-${n}`,\n          type: \"default\",\n          data: { label: \"GPT\" },\n          position: { x: l + n * 250, y: 320 },\n        },\n        {\n          id: `v-${n}`,\n          type: \"input\",\n          data: { label: \"value estimate\" },\n          position: { x: l + n * 250, y: 50 },\n        },\n      ])\n      .flat()\n  )\n  .concat(\n    range(numColumns - 1)\n      .map((n) => [\n        {\n          id: `h1-${n + 1}`,\n          type: \"default\",\n          data: {\n            label: (\n              <p>\n                h<sub>1</sub>\n              </p>\n            ),\n          },\n          position: { x: l + 50 + (n + 1) * 250, y: 370 },\n          style: { width: 20, height: 30, align: \"top\" },\n        },\n        {\n          id: `word-${n}`,\n          type: \"default\",\n          data: { label: \"word\" },\n          position: { x: l + 100 + n * 250, y: 150 },\n        },\n      ])\n      .flat()\n  );\n\nconst edges: Array<Edge> = [\n  {\n    id: `action-perception`,\n    target: `perception`,\n    source: `action`,\n    label: \"REINFORCE\",\n    animated: true,\n    type: \"custom2\",\n  } as Edge,\n  {\n    id: `action-hn`,\n    target: `hn-${numColumns - 1}`,\n    source: `action`,\n    label: \"REINFORCE\",\n    animated: true,\n  } as Edge,\n]\n  .concat(\n    range(numColumns)\n      .map((n: number) => {\n        return [\n          {\n            id: `perception-gpt${n}`,\n            target: \"perception\",\n            source: `gpt-${n}`,\n            animated: true,\n          },\n          {\n            id: `hn-${n}-gpt-${n}`,\n            source: `hn-${n}`,\n            target: `gpt-${n}`,\n            animated: true,\n          },\n          {\n            id: `hn-${n}-v-${n}`,\n            target: `hn-${n}`,\n            source: `v-${n}`,\n            animated: true,\n          },\n        ];\n      })\n      .flat()\n  )\n  .concat(\n    range(numColumns - 1)\n      .map((n) => {\n        let o = n + 1;\n        return [\n          {\n            id: `gpt-${o}-h1-${o}`,\n            source: `gpt-${o}`,\n            target: `h1-${o}`,\n\n            animated: false,\n          },\n          {\n            id: `hn-${n}-word-${n}`,\n            target: `hn-${n}`,\n            source: `word-${n}`,\n            label: \"REINFORCE\",\n            animated: true,\n          },\n        ].concat(\n          range(o).map((m) => ({\n            id: `word-${m}-h1-${n}`,\n            source: `word-${m}`,\n            target: `h1-${o}`,\n            animated: false,\n            type: \"custom1\",\n          }))\n        );\n      })\n      .flat()\n  );\nconst elements: Elements = (nodes as Elements).concat(edges as Elements);\n\nconst App = () => (\n  <div style={{ height: 1000 }}>\n    <ReactFlow\n      edgeTypes={{ custom1: CustomEdge(500), custom2: CustomEdge(600) }}\n      elements={elements}\n    />\n  </div>\n);\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}